%%%%%%%%%%%%%%% Multi-diffusive species analysis v3.8 %%%%%%%%%%%%%%%%%%%%%
%%%% In the case of problem, please contact 
%%%% Sina Jazani (sjazani@asu.ed) or Dr. Steve Presse (spresse@asu.edu).
%%%% The code written by Sina Jazani (2019-05-13)


%%%%%%%%%%%%%%%%%%%%% Import experimental traces %%%%%%%%%%%%%%%%%%%%%%%%%% 
%%%%  In the case that the user want to import an experimental trace:
%%%%
%%%%    -  The imported trace should ba a vector of single photon arrival
%%%%       times.
%%%%    -  Start from step 3 which the user choose a segment of the
%%%%       imported trace and bin it based on initial bin size.
%%%%    -  In step 4 we apply the addaptive bin and the outputs are bbon
%%%%       sizes and the related trace.
%%%%    -  In step 5 user will provide parameter which are needed in the
%%%%       algorithm.
%%%%    -  It is necessary for the user to define wxy, wz, and PSF_func
%%%%       type before run step 6.
%%%%
%%%%          PSF_func = 1 -> 3D gaussian
%%%%          PSF_func = 2 -> 2D Gaussian-Lorentzian
%%%%          PSF_func = 3 -> 2D Gaussian-cylindrical


%%%%%%%%%%%%%%%%%%%%%%%%%%%% Clear the history %%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 0
clc
clear
close all
handles=[];
% Add the function folder to the path
addpath('sampler_Fun')

% Add the raw data folder to the path
addpath('raw_data')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%% Define parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Delta_t              =   10^-7     ;    % Camera dead time (second)
Diffusion            =      10     ;    % Deffusion coefficient(s) of species

% If you import more than one Molecule_emission, the code will provide the
% same number of traces generated by the same molecule trajectories, but
% different emission rates. For example: Molecule_emission    =   [10^4 , 5*10^4 , 10^5]
% In the step 5, you should selest the trajectory which you like to analyze.
% For exampleby: Selected_trace=1 -> trace with molecular brightness of 10^4

Molecule_emission    =   5*(10^4)  ;    % Molecule photon emission rate (photons/s)

Background_emission  =    1000     ;    % Background photon emission rate (photons/s)
Lxy                  =       2     ;    % Periodic boundary in x and y axis
Lz                   =       6     ;    % Periodic boundary in z axis

%%%%%%%%%%%%%%%%%%%%% Point spread function type %%%%%%%%%%%%%%%%%%%%%%%%%%
%  3D Gaussian             = 1 
%  2D Gaussian-Lorentzian  = 2 
%  2D Gaussian-Cylindrical = 3
PSF_func             =       1     ;   

%%%%%%%%%%%%%%%%%%% Point spread function dimension %%%%%%%%%%%%%%%%%%%%%%%
wxy                  =       0.3   ;   % Semi-axis of confocal in xy plane (micro meter)
wz                   =       3.5   ;   % Semi-axis of confocal in xy plane (micro meter)

Number_molecules_sim =      30     ;    % Number of molecule for each species

Length_signal        =    10^6     ;    % Number of steps
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 2
%%%%%%%%%%%%%%%%%%%%%%%% Generate synthetic trace %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[ X,Y,Z,single_photon_arrivals ] = Sample_Generator( ...
...
...
Lxy               , Lz                  , Length_signal , Number_molecules_sim , ...
wxy               , wz                  , Diffusion     , Delta_t              , ...
Molecule_emission , Background_emission , PSF_func      , handles              , ...
0                );
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 3
%%%% Choose the segment of interest from the signal and bin size %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
bin_size =  0.0001   ;             % Initial bin size (second)

minn     =  1        ;             % minimum time step
maxx     =  1000    ;             % Maximuum time step

% Calculations on all of the time traces
for num_sig=1:length(Molecule_emission)
% Find the partial trace
mminn(1,num_sig)=min(find(single_photon_arrivals{num_sig}>=(minn-1)*bin_size));
mmaxx(1,num_sig)=max(find(single_photon_arrivals{num_sig}<=maxx*bin_size));

edge=cumsum([0,repmat(bin_size,1,floor(single_photon_arrivals{num_sig}(mmaxx(1,num_sig))/bin_size)-...
                                 floor(single_photon_arrivals{num_sig}(mminn(1,num_sig))/bin_size))]);
if mminn(1,num_sig)==1
    sss(1,num_sig)=0;
else
    sss(1,num_sig)=single_photon_arrivals{num_sig}(mminn(1,num_sig));
end
trace_single_partial{num_sig}=single_photon_arrivals{num_sig}(mminn(1,num_sig):mmaxx(1,num_sig))-sss(1,num_sig);

[trace_binned_partial{num_sig},~] = histcounts(single_photon_arrivals{num_sig}(mminn(1,num_sig):mmaxx(1,num_sig))-sss(1,num_sig),edge);

subplot(length(Molecule_emission),1,num_sig)
plot(trace_binned_partial{num_sig})
xlabel(['Time step (\Deltat=' num2str(bin_size) 's)'])
ylabel({'Observed photons','molecular brightness=',num2str(Molecule_emission(num_sig))})

end
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 4
%%%%%%%%%%%%%%%%%% Applying addaptive binsize %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

threshold = 4;                % Adaptive bin size threshold

for num_sig=1:length(Molecule_emission)
    
    [trace{num_sig} , Time{num_sig}] = ...
        ...
    Adaptive_bin( threshold , trace_binned_partial{num_sig} , trace_single_partial{num_sig} , bin_size);

    subplot(3,length(Molecule_emission),num_sig)
    plot(trace{num_sig})
    ylabel('Adaptive binned trace')

    subplot(3,length(Molecule_emission),num_sig+length(Molecule_emission))
    plot(Time{num_sig})
    ylabel('Adaptive binned sizes')

    subplot(3,length(Molecule_emission),num_sig+2*length(Molecule_emission))
    plot(trace_binned_partial{num_sig})
    xlabel(['Time step (\Deltat=' num2str(bin_size) 's)'])
    ylabel({'Uniformly binned','Observed photons'})

    Imported_trace{num_sig}=trace{num_sig};
    Imported_Time{num_sig}=Time{num_sig};
end
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 5
%%%%%%%%%%%%%%% Define parameters of the model %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Run the Gibbs sampler function based on the number of the iteration.
% There are no automatic MCMC termination for this case (multi-diffusive case) and the user 
% needs to choose a large number of iteration.

Selected_trace    =     1    ;     % Select the trace of interest to be analyzed

save_size         =    10    ;     % Portion of the sample to be saved
Number_molecules  =    50    ;     % Maximum number of molecules which will be considered

D_alpha_prior     =     1    ;     % Alpha parameter of inverse gamma distr. as the prior of Diffusion coefficient  
D_beta_prior      =     1    ;     % Beta parameter of inverse gamma ditsr. as the prior of Diffusion coefficient

mu_back_proposal  =  1000    ;     % Proposal parameter of molecule photon emission rate
mu_back_alpha     =     1    ;     % Alpha parameter of gamma distr. as the prior of molecule photon emission rate
mu_back_beta      =  1000    ;     % Beta parameter of gamma distr. as the prior of molecule photon emission rate

mu_proposal       =  1000    ;     % Proposal parameter of background photon emission rate
mu_alpha          =     1    ;     % Alpha parameter of gamma distr. as the prior of background photon emission rate
mu_beta           = 50000    ;     % Beta parameter of gamma distr. as the prior of background photon emission rate

alpha_q           =     2    ;     % Alpha parameter of hyper prior on the loads
beta_q            =     2    ;     % Beta parameter of hyper prior on the loads

mu_prior_xy       =     0.1  ;     % Mean value for X0 prior in x and y coordintes
mu_prior_z        =     0.1  ;     % Mean value for X0 prior in z coordinte
var_prior_xy      =     2    ;     % Variance for X0 prior in x and y coordintes
var_prior_z       =     2    ;     % Variance for X0 prior in z coordinte

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%% Initial vslues (sample from their prior) %%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

D                 =  1/gamrnd(D_alpha_prior ,D_beta_prior)   ;     % Initial Value(s) of Diffusion coefficient
mu                =    gamrnd(mu_alpha ,mu_beta)             ;     % Initial Value of molecule photon emission rate
mu_back           =    gamrnd(mu_back_alpha ,mu_back_beta)   ;     % Initial value of background photon emission rate

b                 = zeros(1,Number_molecules,1)              ;    % Initial value of loads
q                 = zeros(1,Number_molecules,1)              ;    % Initial value of weights on loads
x{1}              = .1*randn(3*Number_molecules,length(trace{Selected_trace}))   ;    % Initial locations of molecules


% Define the normalize distances to measure the concentrations (1 = effective volume of FCS)
concen_radious    = [0.5 , 1, 1.5 ] ;
concentration     = zeros(1,1,length(trace{Selected_trace}),length(concen_radious)) ;    % Set the concentration to zero

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% Point spread function type %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  3D Gaussian             = 1 
%  2D Gaussian-Lorentzian  = 2 
%  2D Gaussian-Cylindrical = 3
PSF_func          = 1      ;


iter_b_mu         = 30     ;       % Number of inner loop of emission and loads, for better convergance

Automatics        = 0      ;       % Automatics =1, keep iterating untill it converges, Automatics=0, number of iterations will be defined by the user
percentage_dif    = 0.1    ;       % Automatic convergance based on the percentage similarity of the posterior of the diffuison coefficient

Filter_typ        = 2      ;       % Filter types: Filter_typ=1 -> EKF and Filter_typ=2 -> UKF
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Step 6
%%%%%%%%%%%%%%%%%%%%%%%%% Run the algorithm %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Since this process is computationaly heavy, we strongly suggest to
% measure the running time with low nuumber of iterations first.

Max_iter          =      1000 ;    % Number of iteration 

tic
[ D              , mu                  , mu_back            , b   , ...
 concentration   , acceptance_rate_mu  , acceptance_rate_b  , x   , ...
 q             ] = Gibbs_sampler(...
...
...
Imported_trace(Selected_trace)  , Imported_Time(Selected_trace) , D_alpha_prior  , D_beta_prior       , ...
save_size                       , Number_molecules              , Max_iter       , wxy                , ...
wz                              , mu_proposal                   , mu_alpha       , mu_beta            , ...
mu_back_proposal                , mu_back_alpha                 , mu_back_beta   , alpha_q            , ...
beta_q                          , mu_prior_xy                   , mu_prior_z     , var_prior_xy       , ...
var_prior_z                     , mu_back                       , iter_b_mu      , concen_radious     , ...
x                               , handles                       , D              , mu                 , ...
b                               , q                             , concentration  , Automatics         , ...
PSF_func                        , Filter_typ                    , percentage_dif , 0                 );
toc
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% Show results %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%% Diffusion coefficients %%%%%%%%%%%%%%%%%%%%%%%%%%%
subplot(2,1,1)
plot(D)
xlabel('Iteration')
ylabel('Diffusion Coef.')

subplot(2,1,2)
dbnd = logspace(-1 , 2 , 200);
histogram(D,dbnd,'Normalization','pdf')

set(gca,'XScale','log')
xlabel('Diffusion coefficient (\mum^2/s)')
ylabel('Post. prob. distr.')

%%
%%%%%%%%%%% molecule and background photon emission rates %%%%%%%%%%%%%%%%%

subplot(2,2,[1,2])
plot(mu,'b')
hold on
plot(mu_back,'r') 
hold off
xlabel('Iteration')
ylabel('Photon emision rates (photons/s)')
set(gca,'YScale','log')

subplot(2,2,3)
dbnd = logspace(1 , 5 , 100);
histogram(mu_back,dbnd,'Normalization','pdf','facecolor','r')
set(gca,'XScale','log')
xlabel('Molecule photon emission rates (photons/s)')
ylabel('Post. prob. distr.')

subplot(2,2,4)
dbnd = logspace(2 , 7 , 100);
histogram(mu,dbnd,'Normalization','pdf','facecolor','b')
set(gca,'XScale','log')
xlabel('Background photon emission rate (photons/s)')
ylabel('Post. prob. distr.')

%%
%%%%%%%%%%%%%%%%% Number of active molecules (loads) %%%%%%%%%%%%%%%%%%%%%%
subplot(2,1,1)
plot(sum(reshape(b(1,:,:),size(b,2),size(b,3)),1))

xlabel('Iteration')
ylabel('Number of active molecules')

subplot(2,1,2)
histogram(sum(reshape(b(1,:,:),size(b,2),size(b,3)),1),'Normalization','pdf')
ylabel('Post. prob. distr.')
xlabel('Number of active molecules')
%%
%%%%%%%%%%%%%%%% Number of molecules throughout the trace %%%%%%%%%%%%%%%%%
ell    = char(hex2dec(strsplit('2113')));


sel_sig_real=unique(find(Molecule_emission==max(Molecule_emission)));
% Pre-calculations
sign_siz           = length(single_photon_arrivals{(sel_sig_real)}(mminn(sel_sig_real):mmaxx(sel_sig_real)));
radi_size          = length(concen_radious);
concentration_real = zeros(length(concen_radious),sign_siz);

% calculate the real concentrations
for num_mol = 1:Number_molecules_sim

        for num_radi = 1:radi_size
            switch PSF_func
                case 1
            concentration_real(num_radi,:) = ...
            concentration_real(num_radi,:)+...
            ( sqrt(((X(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2)+...
                   ((Y(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2)+...
                   ((Z(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wz ).^2) )<=concen_radious(num_radi) );
                case 2
             concentration_real(num_radi,:) = ...
            concentration_real(num_radi,:)+...
            ( sqrt( 0.5*log(1+((Z(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wz ).^2))+...
                 (((X(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2)+...
                   ((Y(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2))./...
                   (1+((Z(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wz ).^2))...
                    )<=concen_radious(num_radi) );
                otherwise
                   concentration_real(num_radi,:) = ...
            concentration_real(num_radi,:)+...
            ( sqrt(((X(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2)+...
                   ((Y(num_mol,mminn(sel_sig_real):mmaxx(sel_sig_real))./wxy).^2) )<=concen_radious(num_radi) );
            end
                             
        end
end

% Cacluate the learned concentrations
mean25=[];
mean50=[];
mean95=[];

for l = 1 : radi_size
    mean25(l,:)=quantile(reshape(concentration(1,:,:,l),min(length(D),10000),length(trace{Selected_trace})),0.025)      ;
    mean50(l,:)=quantile(reshape(concentration(1,:,:,l),min(length(D),10000),length(trace{Selected_trace})),0.5)        ;
    mean95(l,:)=quantile(reshape(concentration(1,:,:,l),min(length(D),10000),length(trace{Selected_trace})),0.975)      ;
end




mean25_stairs=[];
mean50_stairs=[];
mean95_stairs=[];
timee=[];
for i=1:length(Time{Selected_trace})
    mean25_stairs(:,2*i-1)=mean25(:,i);
    mean50_stairs(:,2*i-1)=mean50(:,i);
    mean95_stairs(:,2*i-1)=mean95(:,i);
    
    if  i<length(Time{Selected_trace})
        mean25_stairs(:,2*i)=mean25(:,i+1);
        mean50_stairs(:,2*i)=mean50(:,i+1);
        mean95_stairs(:,2*i)=mean95(:,i+1);
    else
        mean25_stairs(:,2*i)=mean25(:,i);
        mean50_stairs(:,2*i)=mean50(:,i);
        mean95_stairs(:,2*i)=mean95(:,i);
    end
    
    timee(2*i-1)=Time{Selected_trace}(i);
    timee(2*i)=0;
end


for l = 1 : length(concen_radious)
    
    subplot(length(concen_radious)+1,1,l)
    
    h3=stairs(((single_photon_arrivals{sel_sig_real}(mminn(sel_sig_real):mmaxx(sel_sig_real)))-...
        sss(sel_sig_real))./(bin_size),concentration_real(l,:),'g','LineWidth',0.9);
    hold on
    
    h2=stairs(cumsum(timee)./bin_size,mean50_stairs(l,:),'--','color','b','LineWidth',0.9);
    
    x2 = [cumsum(timee)./bin_size, fliplr(cumsum(timee)./bin_size)];
    inBetween = [mean25_stairs(l,:), fliplr(mean95_stairs(l,:))];
    h1=fill(x2, inBetween, 'c','facealpha', 0.2,'edgecolor', 'none');

    
    xlabel('Time step (ms)')
    xlim([0 maxx-minn+1])
    ylabel([{['Number of']} ;{['molecules N_k^{',ell,'}']};{[ell,'=',num2str(concen_radious(l))]}],'Fontsize',11)
  
    ylim([0 unique(max([mean95_stairs(l,:),concentration_real(l,:)]))+0.5])
    box off
    if l==1
       ylim([0 unique(max([mean95_stairs(l,:),concentration_real(l,:)]))*1.7+0.0001])
       [BL,BLicons]=legend([h3,h2,h1],'Exact concentration','Median of posterior','95% conf. interval','location','North','Orientation','Horizontal');
       PatchInLegend = findobj(BLicons(end), 'type', 'patch');
       set(PatchInLegend, 'facea', 0.2)
       set(BL,'box','off')
    end
end

subplot(length(concen_radious)+1,2,[2*length(concen_radious)+1,2*length(concen_radious)+2])
plot(trace_binned_partial{Selected_trace})

xlabel(['Time step (',num2str(bin_size),'\mus)'])
xlim([0 maxx-minn+1])
ylabel('Observed photons')


%%
%%%%%%%%%%%%%%%%%%% Joint probablity distributions %%%%%%%%%%%%%%%%%%%%%%%%
Results=[];


Titles{1}='D';
Results(1,:)=D(1,:);

Titles{2}='\mu_{mol}';
Titles{3}='\mu_{back}';

Results(2:3,:)=[mu;mu_back];
Results=Results';

numParams=size(Results,2);

for i=1:numParams
    for j=i:numParams
        subplot(numParams,numParams,numParams*(i-1)+i+(j-i));
        if i~=j
            scatter(Results(:,i),Results(:,j),'SizeData',1,'Marker','.');
            title([Titles{i},' , ',Titles{j}])
            ylabel(Titles{j})
            xlabel(Titles{i})
            zlabel('Joint Posterior')
            hold on
        end
        if i==j
           histogram(Results(:,j),'Normalization','pdf')
           ylabel('Post. prob. distr.')
           xlabel(Titles{i})
           box off
           hold on 
        end
    end
end
